/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.tables.records.CurrencyExchangeRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrencyExchange extends TableImpl<CurrencyExchangeRecord> {

    private static final long serialVersionUID = -1454262048;

    /**
     * The reference instance of <code>public.currency_exchange</code>
     */
    public static final CurrencyExchange CURRENCY_EXCHANGE = new CurrencyExchange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrencyExchangeRecord> getRecordType() {
        return CurrencyExchangeRecord.class;
    }

    /**
     * The column <code>public.currency_exchange.id</code>.
     */
    public final TableField<CurrencyExchangeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('currency_exchange_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.currency_exchange.code_1</code>.
     */
    public final TableField<CurrencyExchangeRecord, String> CODE_1 = createField("code_1", org.jooq.impl.SQLDataType.VARCHAR.length(5).nullable(false), this, "");

    /**
     * The column <code>public.currency_exchange.code_2</code>.
     */
    public final TableField<CurrencyExchangeRecord, String> CODE_2 = createField("code_2", org.jooq.impl.SQLDataType.VARCHAR.length(5).nullable(false), this, "");

    /**
     * The column <code>public.currency_exchange.rate</code>.
     */
    public final TableField<CurrencyExchangeRecord, BigDecimal> RATE = createField("rate", org.jooq.impl.SQLDataType.NUMERIC.precision(15, 7).nullable(false), this, "");

    /**
     * The column <code>public.currency_exchange.created_date</code>.
     */
    public final TableField<CurrencyExchangeRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.currency_exchange</code> table reference
     */
    public CurrencyExchange() {
        this("currency_exchange", null);
    }

    /**
     * Create an aliased <code>public.currency_exchange</code> table reference
     */
    public CurrencyExchange(String alias) {
        this(alias, CURRENCY_EXCHANGE);
    }

    private CurrencyExchange(String alias, Table<CurrencyExchangeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CurrencyExchange(String alias, Table<CurrencyExchangeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CurrencyExchangeRecord, Long> getIdentity() {
        return Keys.IDENTITY_CURRENCY_EXCHANGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CurrencyExchangeRecord> getPrimaryKey() {
        return Keys.CURRENCY_EXCHANGE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CurrencyExchangeRecord>> getKeys() {
        return Arrays.<UniqueKey<CurrencyExchangeRecord>>asList(Keys.CURRENCY_EXCHANGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CurrencyExchangeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CurrencyExchangeRecord, ?>>asList(Keys.CURRENCY_EXCHANGE__FK_CURRENCY_CODE_1, Keys.CURRENCY_EXCHANGE__FK_CURRENCY_CODE_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrencyExchange as(String alias) {
        return new CurrencyExchange(alias, this);
    }

    /**
     * Rename this table
     */
    public CurrencyExchange rename(String name) {
        return new CurrencyExchange(name, null);
    }
}
