/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.tables.records.RatingsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ratings extends TableImpl<RatingsRecord> {

    private static final long serialVersionUID = 763269249;

    /**
     * The reference instance of <code>public.ratings</code>
     */
    public static final Ratings RATINGS = new Ratings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RatingsRecord> getRecordType() {
        return RatingsRecord.class;
    }

    /**
     * The column <code>public.ratings.id</code>.
     */
    public final TableField<RatingsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('rating_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.ratings.rated_org_id</code>.
     */
    public final TableField<RatingsRecord, Long> RATED_ORG_ID = createField("rated_org_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ratings.rater_org_id</code>.
     */
    public final TableField<RatingsRecord, Long> RATER_ORG_ID = createField("rater_org_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ratings.mark</code>.
     */
    public final TableField<RatingsRecord, Short> MARK = createField("mark", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.ratings.comment</code>.
     */
    public final TableField<RatingsRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR.length(2056), this, "");

    /**
     * The column <code>public.ratings.anonymous</code>.
     */
    public final TableField<RatingsRecord, Boolean> ANONYMOUS = createField("anonymous", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.ratings.show_cargo</code>.
     */
    public final TableField<RatingsRecord, Boolean> SHOW_CARGO = createField("show_cargo", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.ratings.created_date</code>.
     */
    public final TableField<RatingsRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.ratings.deal_id</code>.
     */
    public final TableField<RatingsRecord, Long> DEAL_ID = createField("deal_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ratings.created_user</code>.
     */
    public final TableField<RatingsRecord, Long> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.ratings</code> table reference
     */
    public Ratings() {
        this("ratings", null);
    }

    /**
     * Create an aliased <code>public.ratings</code> table reference
     */
    public Ratings(String alias) {
        this(alias, RATINGS);
    }

    private Ratings(String alias, Table<RatingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ratings(String alias, Table<RatingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RatingsRecord, Long> getIdentity() {
        return Keys.IDENTITY_RATINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RatingsRecord> getPrimaryKey() {
        return Keys.RATINGS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RatingsRecord>> getKeys() {
        return Arrays.<UniqueKey<RatingsRecord>>asList(Keys.RATINGS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RatingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RatingsRecord, ?>>asList(Keys.RATINGS__RATINGS_RATED_ORG_ID_FKEY, Keys.RATINGS__RATINGS_RATER_ORG_ID_FKEY, Keys.RATINGS__FK_DEAL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ratings as(String alias) {
        return new Ratings(alias, this);
    }

    /**
     * Rename this table
     */
    public Ratings rename(String name) {
        return new Ratings(name, null);
    }
}
