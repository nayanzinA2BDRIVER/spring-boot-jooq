/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.tables.records.DocumentsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Documents extends TableImpl<DocumentsRecord> {

    private static final long serialVersionUID = -2031857989;

    /**
     * The reference instance of <code>public.documents</code>
     */
    public static final Documents DOCUMENTS = new Documents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentsRecord> getRecordType() {
        return DocumentsRecord.class;
    }

    /**
     * The column <code>public.documents.id</code>.
     */
    public final TableField<DocumentsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('documents_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.documents.order_id</code>.
     */
    public final TableField<DocumentsRecord, Long> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.documents.created_user</code>.
     */
    public final TableField<DocumentsRecord, Long> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.documents.modified_user</code>.
     */
    public final TableField<DocumentsRecord, Long> MODIFIED_USER = createField("modified_user", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.documents.created_date</code>.
     */
    public final TableField<DocumentsRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.documents.modified_date</code>.
     */
    public final TableField<DocumentsRecord, Timestamp> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.documents.status</code>.
     */
    public final TableField<DocumentsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaultValue(org.jooq.impl.DSL.field("'NEW'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.documents.document_type</code>.
     */
    public final TableField<DocumentsRecord, String> DOCUMENT_TYPE = createField("document_type", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

    /**
     * The column <code>public.documents.file_name</code>.
     */
    public final TableField<DocumentsRecord, String> FILE_NAME = createField("file_name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>public.documents.content_type</code>.
     */
    public final TableField<DocumentsRecord, String> CONTENT_TYPE = createField("content_type", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.documents.content</code>.
     */
    public final TableField<DocumentsRecord, byte[]> CONTENT = createField("content", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>public.documents.deal_id</code>.
     */
    public final TableField<DocumentsRecord, Long> DEAL_ID = createField("deal_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.documents</code> table reference
     */
    public Documents() {
        this("documents", null);
    }

    /**
     * Create an aliased <code>public.documents</code> table reference
     */
    public Documents(String alias) {
        this(alias, DOCUMENTS);
    }

    private Documents(String alias, Table<DocumentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Documents(String alias, Table<DocumentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DocumentsRecord, Long> getIdentity() {
        return Keys.IDENTITY_DOCUMENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DocumentsRecord> getPrimaryKey() {
        return Keys.DOCUMENTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DocumentsRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentsRecord>>asList(Keys.DOCUMENTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DocumentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DocumentsRecord, ?>>asList(Keys.DOCUMENTS__FK_DOCUMENTS_ORDERS, Keys.DOCUMENTS__FK_DOCUMENTS_CREATED_USERS, Keys.DOCUMENTS__FK_DOCUMENTS_MODIFIED_USERS, Keys.DOCUMENTS__FK_DEAL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Documents as(String alias) {
        return new Documents(alias, this);
    }

    /**
     * Rename this table
     */
    public Documents rename(String name) {
        return new Documents(name, null);
    }
}
