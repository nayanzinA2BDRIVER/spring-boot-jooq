/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.enums.ModerationStatus;
import com.nayanzin.springbootjooq.db.public_.enums.OrgType;
import com.nayanzin.springbootjooq.db.public_.enums.PreferredWaypoints;
import com.nayanzin.springbootjooq.db.public_.tables.records.OrganizationsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Organizations extends TableImpl<OrganizationsRecord> {

    private static final long serialVersionUID = -592879661;

    /**
     * The reference instance of <code>public.organizations</code>
     */
    public static final Organizations ORGANIZATIONS = new Organizations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationsRecord> getRecordType() {
        return OrganizationsRecord.class;
    }

    /**
     * The column <code>public.organizations.id</code>.
     */
    public final TableField<OrganizationsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('organizations_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.organizations.name</code>.
     */
    public final TableField<OrganizationsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(168).nullable(false), this, "");

    /**
     * The column <code>public.organizations.country_code</code>.
     */
    public final TableField<OrganizationsRecord, String> COUNTRY_CODE = createField("country_code", org.jooq.impl.SQLDataType.VARCHAR.length(8).nullable(false), this, "");

    /**
     * The column <code>public.organizations.created_date</code>.
     */
    public final TableField<OrganizationsRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.organizations.modified_date</code>.
     */
    public final TableField<OrganizationsRecord, Timestamp> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.organizations.created_user</code>.
     */
    public final TableField<OrganizationsRecord, String> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.VARCHAR.length(64).defaultValue(org.jooq.impl.DSL.field("\"current_user\"()", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.organizations.modified_user</code>.
     */
    public final TableField<OrganizationsRecord, String> MODIFIED_USER = createField("modified_user", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>public.organizations.moderation_status</code>.
     */
    public final TableField<OrganizationsRecord, ModerationStatus> MODERATION_STATUS = createField("moderation_status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.nayanzin.springbootjooq.db.public_.enums.ModerationStatus.class), this, "");

    /**
     * The column <code>public.organizations.description</code>.
     */
    public final TableField<OrganizationsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(11648).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.organizations.org_type</code>.
     */
    public final TableField<OrganizationsRecord, OrgType> ORG_TYPE = createField("org_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.nayanzin.springbootjooq.db.public_.enums.OrgType.class), this, "");

    /**
     * The column <code>public.organizations.preferred_waypoints</code>.
     */
    public final TableField<OrganizationsRecord, PreferredWaypoints> PREFERRED_WAYPOINTS = createField("preferred_waypoints", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.nayanzin.springbootjooq.db.public_.enums.PreferredWaypoints.class), this, "");

    /**
     * The column <code>public.organizations.preferred_countries</code>.
     */
    public final TableField<OrganizationsRecord, String> PREFERRED_COUNTRIES = createField("preferred_countries", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * The column <code>public.organizations.individual_groups</code>.
     */
    public final TableField<OrganizationsRecord, String> INDIVIDUAL_GROUPS = createField("individual_groups", org.jooq.impl.SQLDataType.VARCHAR.length(2048), this, "");

    /**
     * Create a <code>public.organizations</code> table reference
     */
    public Organizations() {
        this("organizations", null);
    }

    /**
     * Create an aliased <code>public.organizations</code> table reference
     */
    public Organizations(String alias) {
        this(alias, ORGANIZATIONS);
    }

    private Organizations(String alias, Table<OrganizationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Organizations(String alias, Table<OrganizationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrganizationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_ORGANIZATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrganizationsRecord> getPrimaryKey() {
        return Keys.ORGANIZATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrganizationsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganizationsRecord>>asList(Keys.ORGANIZATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrganizationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrganizationsRecord, ?>>asList(Keys.ORGANIZATIONS__FK_ORGANIZATIONS_COUNTRIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Organizations as(String alias) {
        return new Organizations(alias, this);
    }

    /**
     * Rename this table
     */
    public Organizations rename(String name) {
        return new Organizations(name, null);
    }
}
