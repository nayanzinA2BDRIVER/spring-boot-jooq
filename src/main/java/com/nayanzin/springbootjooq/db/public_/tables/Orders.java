/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.enums.OrderStatus;
import com.nayanzin.springbootjooq.db.public_.tables.records.OrdersRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = -669765749;

    /**
     * The reference instance of <code>public.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>public.orders.id</code>.
     */
    public final TableField<OrdersRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('orders_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.orders.carrier_branch_id</code>.
     */
    public final TableField<OrdersRecord, Long> CARRIER_BRANCH_ID = createField("carrier_branch_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.orders.customer_branch_id</code>.
     */
    public final TableField<OrdersRecord, Long> CUSTOMER_BRANCH_ID = createField("customer_branch_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.orders.cargo_name</code>.
     */
    public final TableField<OrdersRecord, String> CARGO_NAME = createField("cargo_name", org.jooq.impl.SQLDataType.VARCHAR.length(56).nullable(false), this, "");

    /**
     * The column <code>public.orders.cargo_weight</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> CARGO_WEIGHT = createField("cargo_weight", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 3).nullable(false), this, "");

    /**
     * The column <code>public.orders.cargo_weight_unit</code>.
     */
    public final TableField<OrdersRecord, Integer> CARGO_WEIGHT_UNIT = createField("cargo_weight_unit", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.orders.cargo_volume</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> CARGO_VOLUME = createField("cargo_volume", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 3).nullable(false), this, "");

    /**
     * The column <code>public.orders.cargo_volume_unit</code>.
     */
    public final TableField<OrdersRecord, Integer> CARGO_VOLUME_UNIT = createField("cargo_volume_unit", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.orders.cargo_body</code>.
     */
    public final TableField<OrdersRecord, Integer> CARGO_BODY = createField("cargo_body", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.orders.cargo_temperature</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> CARGO_TEMPERATURE = createField("cargo_temperature", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 3), this, "");

    /**
     * The column <code>public.orders.cargo_temperature_unit</code>.
     */
    public final TableField<OrdersRecord, Integer> CARGO_TEMPERATURE_UNIT = createField("cargo_temperature_unit", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.orders.cargo_description</code>.
     */
    public final TableField<OrdersRecord, String> CARGO_DESCRIPTION = createField("cargo_description", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * The column <code>public.orders.amount</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.orders.currency_code</code>.
     */
    public final TableField<OrdersRecord, String> CURRENCY_CODE = createField("currency_code", org.jooq.impl.SQLDataType.VARCHAR.length(8).nullable(false), this, "");

    /**
     * The column <code>public.orders.partnership</code>.
     */
    public final TableField<OrdersRecord, Short> PARTNERSHIP = createField("partnership", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.orders.comment</code>.
     */
    public final TableField<OrdersRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR.length(2048), this, "");

    /**
     * The column <code>public.orders.geojson</code>.
     */
    public final TableField<OrdersRecord, Object> GEOJSON = createField("geojson", org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>public.orders.created_date</code>.
     */
    public final TableField<OrdersRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.orders.modified_date</code>.
     */
    public final TableField<OrdersRecord, Timestamp> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.orders.created_user</code>.
     */
    public final TableField<OrdersRecord, Long> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.orders.modified_user</code>.
     */
    public final TableField<OrdersRecord, Integer> MODIFIED_USER = createField("modified_user", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.orders.settlment_date</code>.
     */
    public final TableField<OrdersRecord, Timestamp> SETTLMENT_DATE = createField("settlment_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.orders.settlment_type</code>.
     */
    public final TableField<OrdersRecord, Integer> SETTLMENT_TYPE = createField("settlment_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.orders.date_on_active</code>.
     */
    public final TableField<OrdersRecord, Timestamp> DATE_ON_ACTIVE = createField("date_on_active", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.orders.backoffice_user_id</code>.
     */
    public final TableField<OrdersRecord, Long> BACKOFFICE_USER_ID = createField("backoffice_user_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.orders.backoffice_branch_id</code>.
     */
    public final TableField<OrdersRecord, Long> BACKOFFICE_BRANCH_ID = createField("backoffice_branch_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.orders.driver_instructions</code>.
     */
    public final TableField<OrdersRecord, String> DRIVER_INSTRUCTIONS = createField("driver_instructions", org.jooq.impl.SQLDataType.VARCHAR.length(2048), this, "");

    /**
     * The column <code>public.orders.exported</code>.
     */
    public final TableField<OrdersRecord, Boolean> EXPORTED = createField("exported", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.orders.status</code>.
     */
    public final TableField<OrdersRecord, OrderStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.nayanzin.springbootjooq.db.public_.enums.OrderStatus.class), this, "");

    /**
     * The column <code>public.orders.deal_id</code>.
     */
    public final TableField<OrdersRecord, Long> DEAL_ID = createField("deal_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.orders.version</code>.
     */
    public final TableField<OrdersRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.orders.date_on_inactive</code>.
     */
    public final TableField<OrdersRecord, Timestamp> DATE_ON_INACTIVE = createField("date_on_inactive", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.orders.cargo_loading_top</code>.
     */
    public final TableField<OrdersRecord, Boolean> CARGO_LOADING_TOP = createField("cargo_loading_top", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.orders.cargo_loading_back</code>.
     */
    public final TableField<OrdersRecord, Boolean> CARGO_LOADING_BACK = createField("cargo_loading_back", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.orders.cargo_loading_side</code>.
     */
    public final TableField<OrdersRecord, Boolean> CARGO_LOADING_SIDE = createField("cargo_loading_side", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.orders.cargo_loading_racks_removal</code>.
     */
    public final TableField<OrdersRecord, Boolean> CARGO_LOADING_RACKS_REMOVAL = createField("cargo_loading_racks_removal", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>public.orders</code> table reference
     */
    public Orders() {
        this("orders", null);
    }

    /**
     * Create an aliased <code>public.orders</code> table reference
     */
    public Orders(String alias) {
        this(alias, ORDERS);
    }

    private Orders(String alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(String alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrdersRecord, Long> getIdentity() {
        return Keys.IDENTITY_ORDERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.ORDERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.ORDERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersRecord, ?>>asList(Keys.ORDERS__FK_ORDERS_CARRIER_BRANCHES, Keys.ORDERS__FK_ORDERS_CUSTOMER_BRANCHES, Keys.ORDERS__FK_ORDERS_BACKOFFICE_USER, Keys.ORDERS__FK_ORDERS_BACKOFFICE_BRANCH, Keys.ORDERS__FK_DEAL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Orders as(String alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    public Orders rename(String name) {
        return new Orders(name, null);
    }
}
