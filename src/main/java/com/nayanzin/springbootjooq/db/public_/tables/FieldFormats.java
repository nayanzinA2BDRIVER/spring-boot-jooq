/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.tables.records.FieldFormatsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldFormats extends TableImpl<FieldFormatsRecord> {

    private static final long serialVersionUID = -2146535795;

    /**
     * The reference instance of <code>public.field_formats</code>
     */
    public static final FieldFormats FIELD_FORMATS = new FieldFormats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldFormatsRecord> getRecordType() {
        return FieldFormatsRecord.class;
    }

    /**
     * The column <code>public.field_formats.id</code>.
     */
    public final TableField<FieldFormatsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('field_formats_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.field_formats.field_code</code>.
     */
    public final TableField<FieldFormatsRecord, String> FIELD_CODE = createField("field_code", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>public.field_formats.country_code</code>.
     */
    public final TableField<FieldFormatsRecord, String> COUNTRY_CODE = createField("country_code", org.jooq.impl.SQLDataType.VARCHAR.length(8).nullable(false), this, "");

    /**
     * The column <code>public.field_formats.format</code>.
     */
    public final TableField<FieldFormatsRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

    /**
     * The column <code>public.field_formats.created_date</code>.
     */
    public final TableField<FieldFormatsRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.field_formats.modified_date</code>.
     */
    public final TableField<FieldFormatsRecord, Timestamp> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.field_formats.created_user</code>.
     */
    public final TableField<FieldFormatsRecord, String> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.VARCHAR.length(64).defaultValue(org.jooq.impl.DSL.field("\"current_user\"()", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.field_formats.modified_user</code>.
     */
    public final TableField<FieldFormatsRecord, String> MODIFIED_USER = createField("modified_user", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * Create a <code>public.field_formats</code> table reference
     */
    public FieldFormats() {
        this("field_formats", null);
    }

    /**
     * Create an aliased <code>public.field_formats</code> table reference
     */
    public FieldFormats(String alias) {
        this(alias, FIELD_FORMATS);
    }

    private FieldFormats(String alias, Table<FieldFormatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FieldFormats(String alias, Table<FieldFormatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FieldFormatsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FIELD_FORMATS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FieldFormatsRecord> getPrimaryKey() {
        return Keys.FIELD_FORMATS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FieldFormatsRecord>> getKeys() {
        return Arrays.<UniqueKey<FieldFormatsRecord>>asList(Keys.FIELD_FORMATS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FieldFormatsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FieldFormatsRecord, ?>>asList(Keys.FIELD_FORMATS__FK_ORGANIZATIONS_COUNTRIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldFormats as(String alias) {
        return new FieldFormats(alias, this);
    }

    /**
     * Rename this table
     */
    public FieldFormats rename(String name) {
        return new FieldFormats(name, null);
    }
}
