/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.tables.records.PublicSourcesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublicSources extends TableImpl<PublicSourcesRecord> {

    private static final long serialVersionUID = 927628470;

    /**
     * The reference instance of <code>public.public_sources</code>
     */
    public static final PublicSources PUBLIC_SOURCES = new PublicSources();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublicSourcesRecord> getRecordType() {
        return PublicSourcesRecord.class;
    }

    /**
     * The column <code>public.public_sources.id</code>.
     */
    public final TableField<PublicSourcesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('public_sources_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.public_sources.translation_id</code>.
     */
    public final TableField<PublicSourcesRecord, Integer> TRANSLATION_ID = createField("translation_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.public_sources.created_date</code>.
     */
    public final TableField<PublicSourcesRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.public_sources.modified_date</code>.
     */
    public final TableField<PublicSourcesRecord, Timestamp> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.public_sources.created_user</code>.
     */
    public final TableField<PublicSourcesRecord, String> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.VARCHAR.length(64).defaultValue(org.jooq.impl.DSL.field("\"current_user\"()", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.public_sources.modified_user</code>.
     */
    public final TableField<PublicSourcesRecord, String> MODIFIED_USER = createField("modified_user", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * Create a <code>public.public_sources</code> table reference
     */
    public PublicSources() {
        this("public_sources", null);
    }

    /**
     * Create an aliased <code>public.public_sources</code> table reference
     */
    public PublicSources(String alias) {
        this(alias, PUBLIC_SOURCES);
    }

    private PublicSources(String alias, Table<PublicSourcesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PublicSources(String alias, Table<PublicSourcesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PublicSourcesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PUBLIC_SOURCES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PublicSourcesRecord> getPrimaryKey() {
        return Keys.PUBLIC_SOURCES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PublicSourcesRecord>> getKeys() {
        return Arrays.<UniqueKey<PublicSourcesRecord>>asList(Keys.PUBLIC_SOURCES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PublicSourcesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PublicSourcesRecord, ?>>asList(Keys.PUBLIC_SOURCES__FK_COUNTRIES_TRANSLATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PublicSources as(String alias) {
        return new PublicSources(alias, this);
    }

    /**
     * Rename this table
     */
    public PublicSources rename(String name) {
        return new PublicSources(name, null);
    }
}
