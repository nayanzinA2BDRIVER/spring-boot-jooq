/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.tables.records.CountryRegionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryRegion extends TableImpl<CountryRegionRecord> {

    private static final long serialVersionUID = -1374179224;

    /**
     * The reference instance of <code>public.country_region</code>
     */
    public static final CountryRegion COUNTRY_REGION = new CountryRegion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryRegionRecord> getRecordType() {
        return CountryRegionRecord.class;
    }

    /**
     * The column <code>public.country_region.id</code>.
     */
    public final TableField<CountryRegionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.country_region.translation_id</code>.
     */
    public final TableField<CountryRegionRecord, Long> TRANSLATION_ID = createField("translation_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.country_region.created_date</code>.
     */
    public final TableField<CountryRegionRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.country_region.modified_date</code>.
     */
    public final TableField<CountryRegionRecord, Timestamp> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.country_region.created_user</code>.
     */
    public final TableField<CountryRegionRecord, String> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.VARCHAR.length(64).defaultValue(org.jooq.impl.DSL.field("\"current_user\"()", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.country_region.modified_user</code>.
     */
    public final TableField<CountryRegionRecord, String> MODIFIED_USER = createField("modified_user", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * Create a <code>public.country_region</code> table reference
     */
    public CountryRegion() {
        this("country_region", null);
    }

    /**
     * Create an aliased <code>public.country_region</code> table reference
     */
    public CountryRegion(String alias) {
        this(alias, COUNTRY_REGION);
    }

    private CountryRegion(String alias, Table<CountryRegionRecord> aliased) {
        this(alias, aliased, null);
    }

    private CountryRegion(String alias, Table<CountryRegionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountryRegionRecord> getPrimaryKey() {
        return Keys.COUNTRY_REGION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountryRegionRecord>> getKeys() {
        return Arrays.<UniqueKey<CountryRegionRecord>>asList(Keys.COUNTRY_REGION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CountryRegionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CountryRegionRecord, ?>>asList(Keys.COUNTRY_REGION__COUNTRY_REGION_TRANSLATION_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CountryRegion as(String alias) {
        return new CountryRegion(alias, this);
    }

    /**
     * Rename this table
     */
    public CountryRegion rename(String name) {
        return new CountryRegion(name, null);
    }
}
