/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.enums.ModerationStatus;
import com.nayanzin.springbootjooq.db.public_.tables.records.BranchesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Branches extends TableImpl<BranchesRecord> {

    private static final long serialVersionUID = -2135948860;

    /**
     * The reference instance of <code>public.branches</code>
     */
    public static final Branches BRANCHES = new Branches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BranchesRecord> getRecordType() {
        return BranchesRecord.class;
    }

    /**
     * The column <code>public.branches.id</code>.
     */
    public final TableField<BranchesRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('branches_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.branches.org_id</code>.
     */
    public final TableField<BranchesRecord, Long> ORG_ID = createField("org_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.branches.inn</code>.
     */
    public final TableField<BranchesRecord, String> INN = createField("inn", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>public.branches.name</code>.
     */
    public final TableField<BranchesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(80).nullable(false), this, "");

    /**
     * The column <code>public.branches.country_code</code>.
     */
    public final TableField<BranchesRecord, String> COUNTRY_CODE = createField("country_code", org.jooq.impl.SQLDataType.VARCHAR.length(8), this, "");

    /**
     * The column <code>public.branches.postcode</code>.
     */
    public final TableField<BranchesRecord, String> POSTCODE = createField("postcode", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * The column <code>public.branches.city</code>.
     */
    public final TableField<BranchesRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>public.branches.address_line</code>.
     */
    public final TableField<BranchesRecord, String> ADDRESS_LINE = createField("address_line", org.jooq.impl.SQLDataType.VARCHAR.length(150), this, "");

    /**
     * The column <code>public.branches.status</code>.
     */
    public final TableField<BranchesRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.branches.created_date</code>.
     */
    public final TableField<BranchesRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.branches.modified_date</code>.
     */
    public final TableField<BranchesRecord, Timestamp> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.branches.created_user</code>.
     */
    public final TableField<BranchesRecord, String> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.VARCHAR.length(64).defaultValue(org.jooq.impl.DSL.field("\"current_user\"()", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.branches.modified_user</code>.
     */
    public final TableField<BranchesRecord, String> MODIFIED_USER = createField("modified_user", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>public.branches.moderation_status</code>.
     */
    public final TableField<BranchesRecord, ModerationStatus> MODERATION_STATUS = createField("moderation_status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.nayanzin.springbootjooq.db.public_.enums.ModerationStatus.class), this, "");

    /**
     * The column <code>public.branches.is_default</code>.
     */
    public final TableField<BranchesRecord, Boolean> IS_DEFAULT = createField("is_default", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.branches</code> table reference
     */
    public Branches() {
        this("branches", null);
    }

    /**
     * Create an aliased <code>public.branches</code> table reference
     */
    public Branches(String alias) {
        this(alias, BRANCHES);
    }

    private Branches(String alias, Table<BranchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Branches(String alias, Table<BranchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BranchesRecord, Long> getIdentity() {
        return Keys.IDENTITY_BRANCHES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BranchesRecord> getPrimaryKey() {
        return Keys.BRANCHES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BranchesRecord>> getKeys() {
        return Arrays.<UniqueKey<BranchesRecord>>asList(Keys.BRANCHES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BranchesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BranchesRecord, ?>>asList(Keys.BRANCHES__FK_BRANCHES_ORGANIZATIONS, Keys.BRANCHES__FK_BRANCHES_COUNTRIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Branches as(String alias) {
        return new Branches(alias, this);
    }

    /**
     * Rename this table
     */
    public Branches rename(String name) {
        return new Branches(name, null);
    }
}
