/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.tables.records.CurrenciesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Currencies extends TableImpl<CurrenciesRecord> {

    private static final long serialVersionUID = 753960805;

    /**
     * The reference instance of <code>public.currencies</code>
     */
    public static final Currencies CURRENCIES = new Currencies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrenciesRecord> getRecordType() {
        return CurrenciesRecord.class;
    }

    /**
     * The column <code>public.currencies.code</code>.
     */
    public final TableField<CurrenciesRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(8).nullable(false), this, "");

    /**
     * The column <code>public.currencies.name</code>.
     */
    public final TableField<CurrenciesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(48).nullable(false), this, "");

    /**
     * The column <code>public.currencies.translation_id</code>.
     */
    public final TableField<CurrenciesRecord, Long> TRANSLATION_ID = createField("translation_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.currencies.in_use</code>.
     */
    public final TableField<CurrenciesRecord, Boolean> IN_USE = createField("in_use", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.currencies</code> table reference
     */
    public Currencies() {
        this("currencies", null);
    }

    /**
     * Create an aliased <code>public.currencies</code> table reference
     */
    public Currencies(String alias) {
        this(alias, CURRENCIES);
    }

    private Currencies(String alias, Table<CurrenciesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Currencies(String alias, Table<CurrenciesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CurrenciesRecord> getPrimaryKey() {
        return Keys.CURRENCIES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CurrenciesRecord>> getKeys() {
        return Arrays.<UniqueKey<CurrenciesRecord>>asList(Keys.CURRENCIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CurrenciesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CurrenciesRecord, ?>>asList(Keys.CURRENCIES__FK_COUNTRIES_TRANSLATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Currencies as(String alias) {
        return new Currencies(alias, this);
    }

    /**
     * Rename this table
     */
    public Currencies rename(String name) {
        return new Currencies(name, null);
    }
}
