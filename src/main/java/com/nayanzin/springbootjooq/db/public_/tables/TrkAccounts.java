/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.public_.tables;


import com.nayanzin.springbootjooq.db.public_.Keys;
import com.nayanzin.springbootjooq.db.public_.Public;
import com.nayanzin.springbootjooq.db.public_.tables.records.TrkAccountsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrkAccounts extends TableImpl<TrkAccountsRecord> {

    private static final long serialVersionUID = -531014885;

    /**
     * The reference instance of <code>public.trk_accounts</code>
     */
    public static final TrkAccounts TRK_ACCOUNTS = new TrkAccounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrkAccountsRecord> getRecordType() {
        return TrkAccountsRecord.class;
    }

    /**
     * The column <code>public.trk_accounts.id</code>.
     */
    public final TableField<TrkAccountsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('trk_account_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.trk_accounts.system_id</code>.
     */
    public final TableField<TrkAccountsRecord, Integer> SYSTEM_ID = createField("system_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trk_accounts.login</code>.
     */
    public final TableField<TrkAccountsRecord, String> LOGIN = createField("login", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>public.trk_accounts.password</code>.
     */
    public final TableField<TrkAccountsRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>public.trk_accounts.status</code>.
     */
    public final TableField<TrkAccountsRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trk_accounts.org_id</code>.
     */
    public final TableField<TrkAccountsRecord, Integer> ORG_ID = createField("org_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trk_accounts.key_access</code>.
     */
    public final TableField<TrkAccountsRecord, String> KEY_ACCESS = createField("key_access", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>public.trk_accounts.imei</code>.
     */
    public final TableField<TrkAccountsRecord, String> IMEI = createField("imei", org.jooq.impl.SQLDataType.VARCHAR.length(10240), this, "");

    /**
     * The column <code>public.trk_accounts.client_id</code>.
     */
    public final TableField<TrkAccountsRecord, String> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>public.trk_accounts.client_name</code>.
     */
    public final TableField<TrkAccountsRecord, String> CLIENT_NAME = createField("client_name", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * Create a <code>public.trk_accounts</code> table reference
     */
    public TrkAccounts() {
        this("trk_accounts", null);
    }

    /**
     * Create an aliased <code>public.trk_accounts</code> table reference
     */
    public TrkAccounts(String alias) {
        this(alias, TRK_ACCOUNTS);
    }

    private TrkAccounts(String alias, Table<TrkAccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrkAccounts(String alias, Table<TrkAccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TrkAccountsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRK_ACCOUNTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TrkAccountsRecord> getPrimaryKey() {
        return Keys.ACCOUNTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TrkAccountsRecord>> getKeys() {
        return Arrays.<UniqueKey<TrkAccountsRecord>>asList(Keys.ACCOUNTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TrkAccountsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrkAccountsRecord, ?>>asList(Keys.TRK_ACCOUNTS__FK_SYSTEM_ID, Keys.TRK_ACCOUNTS__FK_ACCOUNT_ORGANIZATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TrkAccounts as(String alias) {
        return new TrkAccounts(alias, this);
    }

    /**
     * Rename this table
     */
    public TrkAccounts rename(String name) {
        return new TrkAccounts(name, null);
    }
}
