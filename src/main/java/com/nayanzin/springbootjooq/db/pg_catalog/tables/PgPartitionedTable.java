/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.pg_catalog.tables;


import com.nayanzin.springbootjooq.db.pg_catalog.PgCatalog;
import com.nayanzin.springbootjooq.db.pg_catalog.tables.records.PgPartitionedTableRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgPartitionedTable extends TableImpl<PgPartitionedTableRecord> {

    private static final long serialVersionUID = -1195767285;

    /**
     * The reference instance of <code>pg_catalog.pg_partitioned_table</code>
     */
    public static final PgPartitionedTable PG_PARTITIONED_TABLE = new PgPartitionedTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgPartitionedTableRecord> getRecordType() {
        return PgPartitionedTableRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_partitioned_table.partrelid</code>.
     */
    public final TableField<PgPartitionedTableRecord, Long> PARTRELID = createField("partrelid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_partitioned_table.partstrat</code>.
     */
    public final TableField<PgPartitionedTableRecord, String> PARTSTRAT = createField("partstrat", org.jooq.impl.SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_partitioned_table.partnatts</code>.
     */
    public final TableField<PgPartitionedTableRecord, Short> PARTNATTS = createField("partnatts", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_partitioned_table.partdefid</code>.
     */
    public final TableField<PgPartitionedTableRecord, Long> PARTDEFID = createField("partdefid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_partitioned_table.partattrs</code>.
     */
    public final TableField<PgPartitionedTableRecord, Object[]> PARTATTRS = createField("partattrs", org.jooq.impl.DefaultDataType.getDefaultDataType("int2vector").getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.pg_partitioned_table.partclass</code>.
     */
    public final TableField<PgPartitionedTableRecord, Long[]> PARTCLASS = createField("partclass", org.jooq.impl.SQLDataType.BIGINT.getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.pg_partitioned_table.partcollation</code>.
     */
    public final TableField<PgPartitionedTableRecord, Long[]> PARTCOLLATION = createField("partcollation", org.jooq.impl.SQLDataType.BIGINT.getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.pg_partitioned_table.partexprs</code>.
     */
    public final TableField<PgPartitionedTableRecord, Object> PARTEXPRS = createField("partexprs", org.jooq.impl.DefaultDataType.getDefaultDataType("pg_node_tree"), this, "");

    /**
     * Create a <code>pg_catalog.pg_partitioned_table</code> table reference
     */
    public PgPartitionedTable() {
        this("pg_partitioned_table", null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_partitioned_table</code> table reference
     */
    public PgPartitionedTable(String alias) {
        this(alias, PG_PARTITIONED_TABLE);
    }

    private PgPartitionedTable(String alias, Table<PgPartitionedTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgPartitionedTable(String alias, Table<PgPartitionedTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgPartitionedTable as(String alias) {
        return new PgPartitionedTable(alias, this);
    }

    /**
     * Rename this table
     */
    public PgPartitionedTable rename(String name) {
        return new PgPartitionedTable(name, null);
    }
}
