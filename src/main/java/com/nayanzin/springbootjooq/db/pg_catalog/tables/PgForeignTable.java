/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.pg_catalog.tables;


import com.nayanzin.springbootjooq.db.pg_catalog.PgCatalog;
import com.nayanzin.springbootjooq.db.pg_catalog.tables.records.PgForeignTableRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgForeignTable extends TableImpl<PgForeignTableRecord> {

    private static final long serialVersionUID = -1413768616;

    /**
     * The reference instance of <code>pg_catalog.pg_foreign_table</code>
     */
    public static final PgForeignTable PG_FOREIGN_TABLE = new PgForeignTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgForeignTableRecord> getRecordType() {
        return PgForeignTableRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_foreign_table.ftrelid</code>.
     */
    public final TableField<PgForeignTableRecord, Long> FTRELID = createField("ftrelid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_foreign_table.ftserver</code>.
     */
    public final TableField<PgForeignTableRecord, Long> FTSERVER = createField("ftserver", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_foreign_table.ftoptions</code>.
     */
    public final TableField<PgForeignTableRecord, String[]> FTOPTIONS = createField("ftoptions", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * Create a <code>pg_catalog.pg_foreign_table</code> table reference
     */
    public PgForeignTable() {
        this("pg_foreign_table", null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_foreign_table</code> table reference
     */
    public PgForeignTable(String alias) {
        this(alias, PG_FOREIGN_TABLE);
    }

    private PgForeignTable(String alias, Table<PgForeignTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgForeignTable(String alias, Table<PgForeignTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgForeignTable as(String alias) {
        return new PgForeignTable(alias, this);
    }

    /**
     * Rename this table
     */
    public PgForeignTable rename(String name) {
        return new PgForeignTable(name, null);
    }
}
