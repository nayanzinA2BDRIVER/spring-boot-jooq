/**
 * This class is generated by jOOQ
 */
package com.nayanzin.springbootjooq.db.information_schema.tables;


import com.nayanzin.springbootjooq.db.information_schema.InformationSchema;
import com.nayanzin.springbootjooq.db.information_schema.tables.records.ForeignTablesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForeignTables extends TableImpl<ForeignTablesRecord> {

    private static final long serialVersionUID = -1381593344;

    /**
     * The reference instance of <code>information_schema.foreign_tables</code>
     */
    public static final ForeignTables FOREIGN_TABLES = new ForeignTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForeignTablesRecord> getRecordType() {
        return ForeignTablesRecord.class;
    }

    /**
     * The column <code>information_schema.foreign_tables.foreign_table_catalog</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_TABLE_CATALOG = createField("foreign_table_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.foreign_tables.foreign_table_schema</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_TABLE_SCHEMA = createField("foreign_table_schema", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.foreign_tables.foreign_table_name</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_TABLE_NAME = createField("foreign_table_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.foreign_tables.foreign_server_catalog</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_SERVER_CATALOG = createField("foreign_server_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.foreign_tables.foreign_server_name</code>.
     */
    public final TableField<ForeignTablesRecord, String> FOREIGN_SERVER_NAME = createField("foreign_server_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>information_schema.foreign_tables</code> table reference
     */
    public ForeignTables() {
        this("foreign_tables", null);
    }

    /**
     * Create an aliased <code>information_schema.foreign_tables</code> table reference
     */
    public ForeignTables(String alias) {
        this(alias, FOREIGN_TABLES);
    }

    private ForeignTables(String alias, Table<ForeignTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForeignTables(String alias, Table<ForeignTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForeignTables as(String alias) {
        return new ForeignTables(alias, this);
    }

    /**
     * Rename this table
     */
    public ForeignTables rename(String name) {
        return new ForeignTables(name, null);
    }
}
